// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model News {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String       @id @default(cuid())
    name          String?
    username      String?      @unique
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean      @default(false)
    accounts      Account[]
    sessions      Session[]
    Dogs          Dogs[]
    eventEntry    eventEntry[]
}

model Dogs {
    id         String       @id @default(cuid())
    name       String
    showName   String
    breed      String
    age        Int
    grade      Int          @default(1)
    height     Int          @default(4)
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    eventEntry eventEntry[]
}

model eventEntry {
    id          String   @id @default(cuid())
    dog         Dogs     @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId       String
    grade       Int      @default(1)
    height      Int      @default(4)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    event       String
    dateOfEvent DateTime
    verified    Boolean  @default(false)
    points      Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
