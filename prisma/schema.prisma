// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model News {
    id        String   @id @default(cuid())
    title     String   @default("")
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean        @default(false)
    accounts      Account[]
    sessions      Session[]
    Dogs          Dogs[]
    eventEntry    event[]
    leaguePoints  leaguePoints[]
}

model Dogs {
    id           String         @id @default(cuid())
    name         String         @default("")
    showName     String         @default("")
    breed        String         @default("unknown")
    league       league         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
    leagueId     String
    age          Int            @default(0)
    grade        Int            @default(1)
    height       String         @default("Large")
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    eventEntry   event[]
    leaguePoints leaguePoints[]
}

model event {
    id          String   @id @default(cuid())
    dog         Dogs     @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId       String
    grade       Int      @default(1)
    height      String   @default("Large")
    kennelClub  Boolean  @default(false)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    eventName   String   @default("")
    eventType   String   @default("Agility")
    dateOfEvent DateTime @default(now())
    league      league   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
    leagueId    String
    place       Int      @default(0)
    verified    Boolean  @default(false)
    points      Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("eventEntry")
}

model league {
    id             String         @id @default(cuid())
    name           String         @default("FDAAllAges")
    active         Boolean        @default(true)
    startDate      DateTime       @default(now())
    endDate        DateTime       @default(now())
    initialPoints  Int            @default(0)
    agilityFirst   Int            @default(20)
    agilitySecond  Int            @default(19)
    agilityThird   Int            @default(18)
    agilityFourth  Int            @default(17)
    agilityFifth   Int            @default(16)
    agilitySixth   Int            @default(15)
    agilitySeventh Int            @default(14)
    agilityEighth  Int            @default(13)
    agilityNinth   Int            @default(12)
    agilityNoPlace Int            @default(11)
    jumpingFirst   Int            @default(10)
    jumpingSecond  Int            @default(9)
    jumpingThird   Int            @default(8)
    jumpingFourth  Int            @default(7)
    jumpingFifth   Int            @default(6)
    jumpingSixth   Int            @default(5)
    jumpingSeventh Int            @default(4)
    jumpingEighth  Int            @default(3)
    jumpingNinth   Int            @default(2)
    jumpingNoPlace Int            @default(1)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    event          event[]
    leaguePoints   leaguePoints[]
    Dogs           Dogs[]
}

// create a model which tracks the users total points in a league
model leaguePoints {
    id        String   @id @default(cuid())
    league    league   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
    leagueId  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    dog       Dogs     @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId     String
    points    Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
